import React, { useEffect, useState } from "react";
import "./DiplomesAValider.css";

function DiplomesAValider() {
  const [diplomes, setDiplomes] = useState([]);
  const [loading, setLoading] = useState(true);

  // R√©cup√©rer la liste des dipl√¥mes √† valider depuis le backend
  useEffect(() => {
    const fetchDiplomes = async () => {
      try {
        const response = await fetch("http://localhost:3001/diplomes");
        const data = await response.json();
        setDiplomes(data);
        setLoading(false);
      } catch (error) {
        console.error("Erreur lors de la r√©cup√©ration des dipl√¥mes :", error);
        setLoading(false);
      }
    };

    fetchDiplomes();
  }, []);

  // Fonction pour valider un dipl√¥me individuel
  const validerDiplome = async (id) => {
    try {
      const response = await fetch(`http://localhost:3001/diplomes/${id}/valider`, {
        method: "POST",
      });

      if (response.ok) {
        alert(`‚úÖ Dipl√¥me ${id} valid√© avec succ√®s !`);
        setDiplomes((prevDiplomes) => prevDiplomes.filter((diplome) => diplome.id !== id));
      } else {
        alert("‚ùå Une erreur est survenue lors de la validation.");
      }
    } catch (error) {
      console.error("Erreur lors de la validation du dipl√¥me :", error);
      alert("‚ùå Une erreur est survenue lors de la validation.");
    }
  };

  // Fonction pour valider tous les dipl√¥mes
  const validerTousDiplomes = async () => {
    try {
      const response = await fetch("http://localhost:3001/diplomes/valider-tous", {
        method: "POST",
      });
  
      if (response.ok) {
        alert("‚úÖ Tous les dipl√¥mes ont √©t√© valid√©s avec succ√®s !");
        setDiplomes([]); // Vider la liste apr√®s validation
      } else {
        alert("‚ùå Une erreur est survenue lors de la validation de tous les dipl√¥mes.");
      }
    } catch (error) {
      console.error("Erreur lors de la validation de tous les dipl√¥mes :", error);
      alert("‚ùå Une erreur est survenue lors de la validation de tous les dipl√¥mes.");
    }
  };

  const [validatedDiplomes, setValidatedDiplomes] = useState([]);

// Fonction pour r√©cup√©rer les dipl√¥mes valid√©s
const fetchValidatedDiplomes = async () => {
  try {
    const response = await fetch("http://localhost:3001/diplomes/valides");
    const data = await response.json();
    setValidatedDiplomes(data);
  } catch (error) {
    console.error("Erreur lors de la r√©cup√©ration des dipl√¥mes valid√©s :", error);
    alert("‚ùå Une erreur est survenue lors de la r√©cup√©ration des dipl√¥mes valid√©s.");
  }
};

  

  return (
    <div className="diplomes-container">
      <h2>üéì Dipl√¥mes √† valider</h2>
      {loading ? (
        <p>Chargement...</p>
      ) : (
        <>
          {/* Conteneur pour les boutons */}
          <div className="buttons-container">
            <button className="validate-all-button" onClick={validerTousDiplomes}>
              ‚úÖ Valider tous
            </button>
          </div>

          {/* Liste des dipl√¥mes */}
          <ul className="diplomes-list">
            {diplomes.map((diplome) => (
              <li key={diplome.id} className="diplome-item">
                <div className="diplome-info">
                  <p><strong>Titre :</strong> {diplome.diplomaTitle || "Non sp√©cifi√©"}</p>
                  <p><strong>Type :</strong> {diplome.diplomaType || "Non sp√©cifi√©"}</p>
                  <p><strong>√âtudiant :</strong> {diplome.studentName || "Non sp√©cifi√©"}</p>
                  <p><strong>√âtablissement :</strong> {diplome.etablissement || "Non sp√©cifi√©"}</p>
                  <p><strong>Sp√©cialit√© :</strong> {diplome.speciality || "Non sp√©cifi√©"}</p>
                </div>
                <button className="validate-button" onClick={() => validerDiplome(diplome.id)}>
                  ‚úÖ Valider
                </button>
              </li>
            ))}
          </ul>
        </>
      )}
    </div>
  );
}

export default DiplomesAValider;
